
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String?
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  sessions         Session[]
  accounts         Account[]
  projects         Project[]
  events           Event[]
  comments         Comment[]
  username         String?
  displayUsername  String?
  location         String?
  socialLinks      Json?
  bio              String?
  interests        String[]
  skills           String[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  following        Follow[]  @relation("FollowsAsFollower")
  followers        Follow[]  @relation("FollowsAsFollowing")

  @@unique([username])
  // Optimized indexes for common queries
  @@index([username, email]) // For login and profile lookups
  @@index([email]) // For email-based authentication
  @@index([createdAt]) // For user registration analytics
  @@index([username, createdAt]) // For user discovery and sorting
  @@map("user")
}

model Project {
  id                   String    @id @default(cuid())
  title                String
  description          String
  images               String[]
  tags                 String[]
  userId               String
  openForCollaboration Boolean   @default(false)
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments             Comment[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Optimized indexes for project queries
  @@index([userId, createdAt]) // For user's projects timeline
  @@index([createdAt, id]) // For global project feed
  @@index([tags]) // For tag-based searches using GIN index
  @@index([userId, updatedAt]) // For user's recent activity
  @@index([openForCollaboration, createdAt]) // For collaboration discovery
  @@map("project")
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String
  date        DateTime
  location    String?
  organizer   String?
  images      String[]
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Optimized indexes for event queries
  @@index([userId, createdAt]) // For user's events timeline
  @@index([date, createdAt]) // For upcoming events
  @@index([location, date]) // For location-based event discovery
  @@index([createdAt, id]) // For global events feed
  @@map("event")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  eventId   String?
  event     Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  // Optimized indexes for comment queries
  @@index([projectId, createdAt]) // For project comments
  @@index([eventId, createdAt]) // For event comments
  @@index([userId, createdAt]) // For user's comments
  @@map("comment")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("FollowsAsFollower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("FollowsAsFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  // Optimized indexes for follow queries
  @@index([followerId, createdAt]) // For following list
  @@index([followingId, createdAt]) // For followers list
  @@index([followingId]) // For follower count queries
  @@index([followerId]) // For following count queries
}

model Message {
  id         String   @id @default(cuid())
  content    String
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())
  read       Boolean  @default(false)

  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  // Optimized indexes for message queries
  @@index([senderId, receiverId, createdAt]) // For conversation history
  @@index([receiverId, read, createdAt]) // For unread messages
  @@index([senderId, createdAt]) // For sent messages
  @@index([receiverId, createdAt]) // For received messages
  @@map("message")
}

// Session, Account, and Verification models remain the same with existing indexes
model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@index([userId, expiresAt]) // For active sessions
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@index([userId, providerId]) // For user accounts lookup
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@index([identifier, expiresAt]) // For verification lookups
  @@map("verification")
}
