// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String? 
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  projects      Project[]
  events        Event[]
  comments      Comment[]
  username      String?
  socialLinks   Json? 
  bio           String? 

  

  @@map("user")
  @@index([username,email,id])
  @@unique([username])
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String?
  project   Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  eventId   String?
  event     Event?    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())

  @@index([id,userId,createdAt])
  @@map("comment")
}

model Project {
  id          String    @id @default(cuid())
  title       String
  description String
  images      String[]  // Array of image URLs
  tags        String[]  // e.g., ["web", "AI", "hackathon"]
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("project")
  @@index([userId,id,createdAt])
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String
  date        DateTime
  location    String?
  organizer   String?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("event")
  @@index([id,userId,createdAt])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
  @@index([userId,id])
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
  @@index([id])
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
  @@index([id])
}